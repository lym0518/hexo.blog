{"meta":{"title":"TeFantasyEssay","subtitle":"心之所向，素履以往","description":"一个人的小博客,个人的成长记录文章，java, JAVA, 前端, HTML, CSS, 博客, TeFantasy, yarn, JDBC","author":"TeFantasy","url":"https://lym0518.cn","root":"/"},"pages":[],"posts":[{"title":"Yarn安装及配置","slug":"Yarn安装及配置","date":"2022-06-22T00:37:24.000Z","updated":"2022-06-22T01:54:58.881Z","comments":true,"path":"2022/06/22/Yarn安装及配置/","link":"","permalink":"https://lym0518.cn/2022/06/22/Yarn%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/","excerpt":"","text":"yarn 下载 安装 yarn 1：请点击这里 yarn 2：请点击这里 配置(以下适用于yarn 1) 查看版本，正常显示为安装成功 1yarn -v 修改yarn全局安装目录 1yarn config set global-folder &quot;修改的目录位置&quot; 修改yarn缓存位置 1yarn config set cache-folder &quot;修改的目录位置&quot; 在添加全局包的时候，会在全局安装目录下生成node_modules/.bin目录。 此时需要将该目录的路径添加到系统环境变量中，否则即使通过yarn global 添加到全局包在命令行中也是找不到的。 检查当前bin目录的位置 1yarn global bin 检查当前全局安装的位置 1yarn global dir 查看yarn配置 1yarn config list 摘录文章： 修改Yarn的全局安装和缓存位置 npm/yarn修改全局安装路径和缓存路径","categories":[{"name":"问题总结","slug":"问题总结","permalink":"https://lym0518.cn/categories/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"issue","slug":"issue","permalink":"https://lym0518.cn/tags/issue/"}],"author":"言梦"},{"title":"MySQL安装-初始化-JDBC链接数据库","slug":"MySQL安装-初始化-JDBC链接数据库","date":"2022-06-14T13:35:40.000Z","updated":"2022-06-25T01:45:34.689Z","comments":true,"path":"2022/06/14/MySQL安装-初始化-JDBC链接数据库/","link":"","permalink":"https://lym0518.cn/2022/06/14/MySQL%E5%AE%89%E8%A3%85-%E5%88%9D%E5%A7%8B%E5%8C%96-JDBC%E9%93%BE%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/","excerpt":"","text":"下载MySQL 这里下载的离线完整包。 前往官网下载：点此直达 下载社区免费版，选择上方Windows (x86, 64-bit), ZIP Archive版本，下方MySQL开发使用。 选定IDE 选择一个数据库的IDE，DataGrip,SQL Server,navicat等等等等，任选其一即可 这里推荐DataGrip，很方便的可以可视化处理数据库的工具。如果是大学生，可凭借学信网信息拿到他们家的教育许可证，一系列软件可以免费使用 JDBC连接器 可下载，点此直达 操作系统选择Platform Independent(平台无关)。即可显示链接 若读者使用的DataGrip，可在该IDE设置界面的时候下载相关连接器驱动。 安装MySQL以下为离线完整包初始化， 解压后先将MySQL的bin目录添加到环境变量，以便使用。 以管理员权限运行终端窗口， 进行数据库初始化 1mysqld --initialize --console 此时在解压根目录下多出一个data文件夹，其中.err文件包含root最高权限的临时密码 或者在执行后控制台输出的信息中的 root@localhost: 后的符号字母数字随机组合即为临时密码。 输入以下代码安装sql。 1mysqld install 启动sql服务 1net start mysql 更改密码 1mysqladmin -u root -p password 最后用更改好的密码进行测试 1mysql -u root -p 显示 mysql&gt; 说明可以使用了 加载连接器驱动 DataGrip用户在打开该IDE后，加载数据源时，IDE会提示缺少驱动，一步步来就可以。 若下载失败，在加载数据源的界面找到驱动程序栏，手动添加 jar包 （不是zip压缩包） 项目添加JDBC的连接器：前往项目所在的文件夹，找到lib文件夹，没有就新建，将连接器解压后的 jar包 整个移动到其中，在项目设置中将其中的jar包添加为依赖，即可使用。 若使用的eclipse,在执行相同的操作后，右键 jar包 ，选择Build Path将其添加为项目依赖。 最后，进行数据库的链接查看有没有报错。","categories":[{"name":"问题总结","slug":"问题总结","permalink":"https://lym0518.cn/categories/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"issue","slug":"issue","permalink":"https://lym0518.cn/tags/issue/"}],"author":"言梦"},{"title":"建站问题汇总","slug":"建站问题汇总","date":"2022-04-12T08:20:57.000Z","updated":"2022-06-22T01:02:04.085Z","comments":true,"path":"2022/04/12/建站问题汇总/","link":"","permalink":"https://lym0518.cn/2022/04/12/%E5%BB%BA%E7%AB%99%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/","excerpt":"","text":"hexo篇一：关于主题配置文件的合并相关问题HEXO文档:在一个配置文件前加上 12foo: bar&#x27;a&#x27; 另一个前加上同样的，bar内的内容为b。如果有更多想合并的配置文件，按英文字母表的顺序依次往下更改以上特性自 HEXO 2.8.2开始提供 若主题配置文件内容太多，可在根目录新建yml文件，命名为 _config.[theme].yml并将config.yml文件主题配置为该主题，以供 Hexo 寻找该文件。 该文件在HEXO执行生成时会与原主题配置文件合并，替换原文件不同的部分，因此更改写在该文件里方便管理，更防止出现不可改变的错误。 Hexo 在合并主题配置时，Hexo 配置文件中的 theme_config 的优先级最高，其次是 _config.[theme].yml 文件，最后是位于主题目录下的_config.yml 文件。以上特性自 Hexo 5.0.0 起提供 二，关于volantis黑暗模式失效的问题&emsp;&emsp;今天发现博客暗黑模式失效，在该开的开关都打开的情况下。&emsp;&emsp;经过分主题配置文件和主题本体文件的比对，发现问题在上次更新主题后，主题主题配置文件更新了，而我的分主题配置文件还是老版本，部分设置不一样。&emsp;&emsp;在Rightmenu设置栏暗黑模式有提示需要开启 plugins.darkmodejs，顺藤摸瓜发现在required plugins栏多了全局引入 jquery的开关，默认是关闭的。我的分主题配置文件没有这个开关，导致两个配置文件合并时jquery还是关闭着的，因此暗黑模式无法使用。 Vuepress篇 hexo在我发现部署生成渲染文章不会渲染类似&amp;emsp；的HTML符号，而是直接显示出来。在多方查找解决无果后，决定重新选择一个生成器才有了Vuepress的站点。 一：初接触，建站初始化相关 选定一个包管理器，如果是yarn2的话需要在初始化后的.yarnrc.yml文件中添加 nodeLinker: ‘node-modules’。以便将来能找到路径。这个解决方法仅仅只是恢复了老版本的方式，治标不治本。 这是因为yarn2采用了新的方式即Plug’n’Play（pnp）,pnp.cjs包含各种映射：一个将包名称和版本链接到它们在磁盘上的位置，另一个将包名称和版本链接到它们的依赖项列表。在.yarn文件夹里的cache文件夹可以看到它把每个依赖压缩成了压缩包，这也是直接安装运行不通过的原因。(该原因让我找了一天多，浪费了大量的时间。) 其余参照官方文档一步一步来，这里我选用的是Vuepress2。 上传部署尤其要注意base的设置，如果不正确，会造成打包后样式丢失，本人试了好久，无论是’/‘还是’/&lt;仓库名&gt;/‘都有不对的地方，最后干脆不设置，让它默认后，即使是加网址也不会丢失样式。","categories":[{"name":"问题总结","slug":"问题总结","permalink":"https://lym0518.cn/categories/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"issue","slug":"issue","permalink":"https://lym0518.cn/tags/issue/"}],"author":"言梦"},{"title":"Pointer(指针)笔记","slug":"Pointer(指针)笔记","date":"2021-11-02T11:20:57.000Z","updated":"2022-06-06T14:07:06.544Z","comments":true,"path":"2021/11/02/Pointer(指针)笔记/","link":"","permalink":"https://lym0518.cn/2021/11/02/Pointer(%E6%8C%87%E9%92%88)%E7%AC%94%E8%AE%B0/","excerpt":"","text":"声明指针 要声明指向特定类型的指针，使用下面的格式： ypename* poiterName 给指针赋值 应将内存地址赋给指针。可以对变量名用&amp;操作符，来获得被命名的内存的地址，new操作符返回未命名的地址。 解除指针引用 对指针解除引用意味着获得指针指向的值。对指针应用解除引用或间接操作符（*）来解除引用。 另一种解除指针引用的方法是使用数组表示法。绝不要对未被初始化为适当地址的指针解除引用。 区分指针和指针所指向的值 如果pt是指向int的指针，则*pt不是指向int的指针，而是完全等同于一个int类型的变量。pt才是指针。 数组名 在多数情况下，c++将数组名视为数组的第一个元素的地址。 将sizeof操作符用于数组名时，此时将返回整个数组的长度。（单位为字节） 指针算术 c++允许将指针和整数相加。加1的结果等于原来的地址值加上指向的对象占用的总字节数。还可以将一个指针减去另一个指针获得两个指针的差。后一种运算将得到一个整数，仅当两个指针指向同一个数组（也可以指向超出结尾的一个位置）时，这种运算才有意义；这将得到两个元素的间隔。 数组的动态联编和静态联编 使用数组声明来创建数组时，将采用静态联编，即数组的长度在编译时设置。 使用new[]操作符创建数组时将采用动态联编（动态数组），其将在运行时为数组分配空间，长度也将在运行时设置。使用完这种数组后应使用delete[]释放其占用的内存 数组表示法和指针表示法 使用方括号数组表示法等同于对指针解除引用 数组名和指针变量都是如此，因此对于指针和数组名，既可以使用指针表示法也可以使用数组表示法。","categories":[{"name":"笔记","slug":"笔记","permalink":"https://lym0518.cn/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"study","slug":"study","permalink":"https://lym0518.cn/tags/study/"}],"author":"言梦"},{"title":"HTMLCSS随笔记录","slug":"HTMLCSS笔记","date":"2021-10-15T07:20:57.000Z","updated":"2023-11-05T03:35:08.842Z","comments":true,"path":"2021/10/15/HTMLCSS笔记/","link":"","permalink":"https://lym0518.cn/2021/10/15/HTMLCSS%E7%AC%94%E8%AE%B0/","excerpt":"","text":"序 &lt;h1&gt;&lt;/h1&gt;~&lt;h6&gt;&lt;/h6&gt;为标题标签，数字1-6是字体大小，最多是6。 &lt;hgrout&gt;标题组（标题标签都是块元素） &lt;i&gt;&lt;/i&gt;是斜体。&lt;hr&gt;是分割线。 &lt;p&gt;&lt;/p&gt;是段落标签，标签内的文字在一行，不会另起一段。&lt;br&gt;是单个标签，另起一段。 &lt;html&gt;&lt;/html&gt; 根标签&lt;head&gt; &lt;/head&gt;&lt;body&gt; &lt;/body&gt; 子标签。&lt;title&gt;是&lt;head&gt;的子标签 &lt;img src=””&gt;引入图片。 &lt;a herf=””&gt;&lt;/a&gt;超链接地址。&lt;herf&gt;后添加地址，两个&lt;a&gt;中间填名字。 &lt;&amp;nbsp&gt;为空格 &lt;ul&gt;是加项目符号，&lt;ol&gt;是加序号。&lt;ul&gt;与&lt;ol&gt;标签里的话每段要用&lt;li&gt;包住。 引入图片的标签里添加 &lt;width=“”&gt;&lt;hight=“”&gt;，一个是调宽度，一个是调高度。里面数字的单位px（像素）%（百分比）。 HTML的注释：&lt;!– –&gt; &lt;em&gt;,em标签表示语调的一个加重 独占一行的元素叫做块元素，不独占一行的元素叫做行内元素 &lt;strong&gt;表示强调，重要内容 &lt;blockquate&gt;用来表示一个长引用，&lt;q&gt;表示一个短3引用 HTML属性在标签中（开始标签和自结束标签）才可以设置属性，属性是一个名值对。属性用来设置标签中的内容如何显示。属性和标签名或其他属性要用空格隔开。属性名，属性值不能瞎写。根据文档中的规定写。有些属性有属性值，有些没有。如果有属性值，属性值应该用引号引起来。 基本结构文档声明：&lt;!DOCTYPE html&gt; 进制&nbsp;&emsp;十进制(日常使用)&emsp;&emsp;&emsp;&emsp;特点：满10进1。&emsp;&emsp;&emsp;&emsp;单位数字：10个。&emsp;&emsp;二进制（计算机底层进制）&emsp;&emsp;&emsp;&emsp;特点：满2进1&emsp;&emsp;&emsp;&emsp;单位数字：2个（0-1）&emsp;&emsp;&emsp;&emsp;扩展：&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;所有数据在计算机底层都是以二进制的形式保存&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;可以将内存想象为一个有多个小格子组成的容器，每个小格子中可以存储一个1或者0&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;这一个小格子在内存中被称为1位（bit） &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;8bit=1byte（字节）&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;1024byte=1kb（千字节）&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;1024kb=1mb（兆字节）&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;1024mb=1gb（吉字节）&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;1024gb=1tb（特字节）&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;1024tb=1pb &emsp;&emsp;八进制（很少用）&emsp;&emsp;&emsp;&emsp;特点:满8进1&emsp;&emsp;&emsp;&emsp;单位数字:8个(0-8) &emsp;&emsp;十六进制(一般显示一个二进制数字时都会转换为十六进制)&emsp;&emsp;&emsp;&emsp;特点:满16进1&emsp;&emsp;&emsp;&emsp;单位数字:16个(0-f) 字符编码所有的数据在计算机中存储时都是以二进制的形式存储的，文字也不例外。所以一段文字再存储到内存中时都需要转换成二进制编码当我们读取这段文字时，计算机会将编码转换为文字供我们阅读。 编码&emsp;&emsp;&emsp;将字符转换为二进制码称为编码。 解码&emsp;&emsp;&emsp;将二进制转换为字符称为解码。 字符集&emsp;&emsp;&emsp;编码和解码所采用的规则称为字符集。 乱码问题&emsp;&emsp;&emsp;编码与解码所用字符集不同会导致乱码。 常见的字符集&emsp;&emsp;&emsp;ASCII&emsp;&emsp;&emsp;ISO88591&emsp;&emsp;&emsp;GB2312&emsp;&emsp;&emsp;GBK&emsp;&emsp;&emsp;UTF-8在开发时我们使用的字符集都是UTF-8在head元素里添加 &lt;meta charset=”utf-8”&gt; 告知浏览器所用字符集 实体在网页中编写的多个空格会自动被浏览器解析为一个空格 在HTML的有些时候，我们不能直接书写某些特殊符号如果我们需要在网页中书写这些特殊的符号，则需要用到HTML中的实体（转义字符）实体的语法：&emsp;&amp;+实体的名字+;&emsp;&amp; nbsp;空格&emsp;&amp; gt;大于号&emsp;&amp; lt;小于号&emsp;&amp; copy;版权符号 可以上W3School查 meta&emsp;&emsp;meta主要用于设置网页中的一些元数据，元数据不给用户看 charset 指定网页字符集 name 指定数据的名称 content 指定的数据的内容 &emsp;&emsp;keywords 表示网站关键字，可以同时指定多个关键字，关键字间使用逗号隔开。 description 表示网站的描述。 网站的描述会显示在搜索引擎的搜素结果中 title 标签的内容会作为搜索结果的超链接上的文字显示 语义化标签&emsp;&emsp;在网页中，HTML专门用来负责网页的结构&emsp;&emsp;所以在使用HTML标签时，应关注标签的语义，而不是他的样式。 header 表示网页头部 main 表示网页的主体部分 footer 表示网页的底部 nav 表示网页中的导航 aside 和主体相关内容的其他内容（侧边栏） article 表示一个独立的文章 section 表示一个独立的区块，上边的标签不能表示时使用 div 没有语义，只用来表示一个区块，主要布局元素 spam 行内元素，没有任何语义，一般用于网页中选中文字 列表（list）在html中也可以创建列表，html列表一共有三种， 有序列表 无序列表 定义列表 无序列表，使用ul标签来创建无序列表&emsp;&emsp;使用li表示列表项有序列表，使用ol标签来创建有序列表&emsp;&emsp;使用li表示列表项定义列表，使用dl标签来创建一个定义列表&emsp;&emsp;使用dt来表示定义的内容&emsp;&emsp;使用dd来对内容进行解释说明 列表之间可以互相嵌套 超链接超链接可以让我们从一个页面跳转到其他页面，或者是当前页面的其他位置&emsp;&emsp;使用 a 标签来定义超链接&emsp;&emsp;&emsp;&emsp;属性：&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;href 指定跳转的目标的路径&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;值可以是一个外部网站的地址，也可以是一个内部页面的地址 超链接也是一个行内元素，在a标签中可以嵌套除他以外的任何元素当我们需要跳转一个服务器内部的页面的时候，一般我们都会使用相对路径 ./ ../ ./表示当前文件所在目录../表示当前文件所在的上一级目录 target属性：用来指定超链接打开的位置&emsp;&emsp;可选值;&emsp;&emsp;&emsp;self：默认值 在当前页中打开超链接&emsp;&emsp;&emsp;blank：在一个新的标签页中打开超链接可以直接把href的值设定为#&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;这样点击该超链接，会回到页面顶部。&emsp;&emsp;id属性（唯一不重复） 每一个标签都可以添加id属性 id属性是元素的唯一标识，同一个页面不能出现重复的id属性 我们也可以跳转到页面的指定位置，只需要将href属性设置为#+目标元素的id属性值 在开发中可以将#作为超链接的路径的占位符使用 可以使用javascript:;还作为href的属性此时点击这个超链接什么都不会发生。 图片图片标签用于向当前页面引入一个外部图片&emsp;&emsp;使用img标签来引入外部图片：img标签是一个自结束标签&emsp;&emsp;img这种元素属于替换元素（块和行内元素之间，具有两种元素的特点）&emsp;&emsp;属性： src 属性指定的是外部图片的路径（路径规则和超链接是一样的） alt 图片的描述，这个描述默认情况下不会显示，有些浏览器会在图片无法加载时显示&emsp;搜索引擎会根据alt中的内容来识别图片，如果不写alt属性则图片不会被搜索引擎所收录 width 图片的宽度（单位是像素） height 图片的高度&emsp;宽度和高度如果只修改了一个，则另一个会等比例缩放 注意：一般情况下在pc端，不建议修改图片的大小，需要多大的图片就裁多大但是在移动端，经常需要对图片进行缩放（大图缩小） 图片的格式： jpeg（jpg） 支持的颜色比较丰富，不支持透明效果，不支持动图 一般用来显示照片 gif 支持的颜色比较少，支持简单透明，支持动图 颜色单一的图片，动图 png 支持的颜色丰富，支持复杂透明，不支持动图 颜色丰富，复杂透明的图片（专为网页而生） webp 这种格式是谷歌推出的专门用来表示网页中的图片的一种格式 它具备其他图片格式的所有优点，而且文件还特别小 缺点：兼容性不好 base64 将图片使用base64编码，这样可以将图片转换为字符，通过字符形式来引入图片 一般都是一些需要和网页一起加载的图片才会使用base64 原则： 效果一样，用小的 效果不一样，用效果好的 其他内联框架内联框架，用于向当前页面引入一个其他页面 src：指定要引入页面的路径 frameborder：指定内联框架的边框 音视频播放audio 标签用来引入一个外部的音频文件 音视频文件引入时，默认情况下不允许用户控制播放停止 属性： controls 是否允许用户控制播放 autoplay 音频文件是否自动播放 如果设置了autoplay，则音乐在打开页时会自动播放 但是目前大部分不支持 loop 循环播放 除了通过src来指定外部文件的路径以外，还可以通过source来指定文件。 embed 使用该标签Ie8以下浏览器也能播放音频和视频，需要指定宽跟高，否则几乎没有界面，会无法控制，type指定文件格式，该标签会自动播放，无法修改。 折中方案：audio标签中套用embed标签。 使用video标签引入视频文件 使用方式跟audio基本一样 CSS简介网页分成三个部分 结构（HTML） 表现（CSS） 行为（JS） CSS 层叠样式表 网页实际上是一个多层的结构，通过css可以分别为网页的每一层来设置样式，而最终我们能看见的只是网页的最上面的一层 css用来设置元素的样式 使用css修改元素样式 第一种方式（内联样式/行内样式） 在标签内部通过style属性来设置元素样式 问题： 内联样式只能对一个标签生效，如果希望影响到多个元素，需要都复制一遍 并且当样式发生变化时，我们需要一个一个的修改，很麻烦。 注：开发时不建议使用内联样式 第二种方式(内部样式表) 将样式编写到head的style标签里 然后通过CSS的选择器来选中元素并为其设置各种样式 可以同时为多个标签设置样式，并且修改时只需修改一处即可全部应用。 内部样式表更加方便对样式进行复用 问题： 我们的内部样式表只能对一个网页起作用 它里面的样式不能跨页面进行复用 第三种方式（外部样式表）最佳使用方式 可以将CSS样式编写到一个外部的CSS文件中， 然后通过link标签来引入外部的CSS文件 外部样式表需要通过link标签引入， 意味着只要是想使用这些样式的网页都可以对其进行引用， 使样式可以在不同页面之间复用 将样式编写到外部的CSS文件中，可以使用到浏览器的缓存机制， 从而加快网页的加载速度，提高用户体验。 基本语法选择器 声明块选择器：通过选择器可以选中页面中的指定元素 比如p的作用就是选中页面中所有的p元素 声明块：通过声明块来指定要为元素设置的样式 声明块由一个个声明组成 声明是一个名值对结构 一个样式名对应一个样式值.名和值之间以：连接，以；结尾。 常用选择器元素选择器 作用：根据标签名来选中制定元素 语法：标签名（） 例子：p{} h1{} id选择器 作用：根据元素的id属性值选中一个元素 语法：#id属性值{} 例子：#red{} #box{} 类选择器 作用：根据元素的class属性值选中一组元素 语法：.class属性值 class是一个标签属性，它和id类似，不同的是class可以重复使用 可以通过class属性来为元素分组 可以同时为一个元素指定多个class属性 通配选择器 作用：选中页面中的所有元素 语法：* 复合选择器交集选择器 作用：选中同时符合多个条件的元素 语法：选择器1选择器2选择器3选择器n{} 注意： 交集选择器中如果有元素选择器，必须使用元素选择器开头 选择器分组（并集选择器） 作用：同时选择多个选择器的元素 语法：选择器1，选择器2，选择器3，选择器n{} 关系选择器父元素 直接包含子元素的叫做父元素 子元素 直接被父元素包含的元素是子元素 祖先元素 直接或间接包含后代元素的元素叫做祖先元素 一个元素的父元素也是他的祖先元素 后代元素 直接或间接被祖先元素包含的元素叫做后代元素 子元素也是后代元素 兄弟元素 拥有相同父元素的元素是兄弟元素 子元素选择器 作用：选中指定父元素的指定子元素 语法：父元素&gt;子元素 后代元素选择器 作用：选中指定元素内的指定后代元素 语法：祖先 后代 选择下一个 语法：前一个+下一个 选择下边所有 语法：兄~弟 属性选择器 [属性名] 选择含有指定属性的元素 [属性名=属性值] 选择含有指定属性名和属性值的元素 [属性名^=属性值] 选择属性值以指定值开头的元素 [属性名$=属性值] 选择属性值以指定值结尾的元素 [属性名*=属性值] 选择属性值中含有某值的元素 伪类（不存在的类,特殊的类）用来描述一个元素的特殊状态例：第一个元素，鼠标点击的元素伪类一般情况下都用冒号开头 :first-child 第一个子元素 :last-child 最后一个子元素 :nth-child(n) 选中第n个子元素 特殊值:(1). n 第n个 n的范围0到正无穷(2). 2n或even 选中偶数位的元素(3). 2n+1或odd 选中奇数位的元素 以上伪类都是根据所有子元素进行排序的 :first-of-type :last-of-type :nth-last-of-type() 这几个伪类和上述功能类似，不同点是他们在同类型元素中排序 :not() 否定伪类: 将符合条件的元素从选择器中去除 a元素的伪类 :link 用来表示没访问过的链接（正常的链接）。 :visited 用来表示访问过的链接，由于隐私原因只能生效color属性。 :hover 用来表示鼠标移入的状态。 :active 用来表示鼠标点击 伪元素 伪元素，表示页面中一些特殊的并不真实存在的元素 伪元素的使用 :: 开头 ::first letter 表示第一个字母 ::first line 表示第一行 ::selection 表示选中的内容 ::before 元素的开始 ::after 元素的最后 before 和 after 必须结合content属性使用 继承 样式的继承，我们为一个元素设置的样式同时也会应用到他的后代元素上 继承是发生在祖先元素和后代之间的 继承的设计是为了方便开发， 利用继承可以将一些通用的样式统一设置到共同的祖先元素上，这样只需设置一次就可以让所有元素具有该样式。 但不是所有的样式都会被继承，比如背景，布局等等 选择器的权重 样式的冲突 当我们通过不同的选择器，选中相同的元素，并且为相同的样式设置不同的值时，此时就发生了样式的冲突。 发生样式冲突时，应用哪个样式由选择器的优先级（权重）决定 选择器的权重（从高到低） 内联样式 id选择器 类和伪类选择器 元素选择器 通配选择器 继承的样式 比较优先级时，需要将所有的选择器的优先级进行相加计算，最后优先级越高，越优先显示（分组选择器是单独计算的） 选择器的累加不会超过其最大数量级 如果优先级计算后相同，此时优先使用靠下的样式 可以在某一个样式的后面添加 ！important，则此时这个样式会获取最高的优先级，甚至超过内联样式。 开发中慎用，样式不好改。 像素和百分比 长度单位 像素 同样像素在不同设备上显示效果不一样 百分比 可以将属性值设置为相对于父元素属性的百分比 设置百分比可以使子元素跟随父元素的改变而改变 em em是相对于元素的字体大小来计算的 1em=1font-size em会根据字体大小的改变而改变 rem rem相对于根元素的字体大小来计算 RGB值 颜色单位 在css中可以直接用颜色名来设置各种颜色，但是在css中直接使用颜色名不方便 RGB值： RGB通过三种颜色的不同浓度来呈现不同的颜色。 每一种颜色的范围在0-255（0%-100%）之间 语法：RGB(红色，绿色，蓝色) RGBA RGBA就是在RGB的基础上增加了一个a，用来表示不透明度。 需要四个值，前三个跟RGB一样，第四个表示不透明度 1表示不透明，0表示完全透明，.5表示半透明。 十六进制的RGB值： 语法：#红色绿色蓝色 如果颜色两位重复可以进行简写 HSL值 HSLA值 H 色相(0-360) S 饱和度,颜色的浓度(0%-100%) L 亮度，颜色的亮度(0%-100%) 布局文档流(normal flow) 网页是一个多层结构，一层摞着一层 通过css可以分别为网页的每一层来设置样式 作为用户来讲只能看见最顶上一层 这些层中，最底下的一层成为文档流，文档流是网页的基础，我们所创建的元素默认都是在文档流中进行排列 对于我们来说元素有两个状态 在文档流中 不在文档流中. 元素在文档中有什么特点 块元素 块元素在页面中独占一行 默认宽度是父元素的全部(会把父元素撑满) 默认高度是被内容撑开(子元素) 行内元素 行内元素不会独占一行，只占自身的体量大小 行内元素在页面中自左向右水平排列 如果一行中不能容纳下所有的行内元素，则元素会换到第二行继续自左向右排列(书写习惯一致) 行内元素默认宽度和高度都是被内容撑开 盒模型 css将页面中的所有元素都设置成了矩形的盒子 将元素设置为矩形的盒子后，对页面的布局就变成了将不同的盒子摆放到不同的位置 每一个盒子都由以下几个部分组成 内容区(content) 元素中所有的子元素和文本内容都在内容区排列 内容区的大小由width和height两个属性来设置 内边距(padding) 边框(border) 外边距(margin) 边框属于盒子的边缘，要设置边框，至少要设置三个样式(缺一不可)： 边框宽度 border-width 有默认值，一般三个像素 可以用来指定四个方向的边框的宽度 值的情况 四个值:上&emsp;右&emsp;下&emsp;左 三个值:上&emsp;左右&emsp;下 两个值:上下&emsp;左右 除了border-width还有border-xxx-width xxx可以是top,right,bottom,left 用来单独指定某一个边的宽度 边框颜色 border-color 可以用来指定四个方向的边框的颜色，规则和border-width一样 可以省略不写，默认使用color值。color值默认为black(黑色) 边框样式 border-style border-style指定边框的样式(默认值时none，表示没有边框) solid表示实线 dotted点状虚线 dashed虚线 double双线 边框的大小会影响到整个盒子的大小 border简写属性，通过该属性可以同时设置边框所有样式，并且没有顺序要求 内边距(padding)：内容区和边框之间的距离是内边距 共有四个方向的内边距 padding-top padding-right padding-bottom padding-left 内边距的设置会影响到盒子的大小 背景颜色会延伸到内边距上 一个盒子的可见框的大小，由内容区，内边距和边框共同决定，所以在计算盒子大小时需要将三个加起来计算。 padding是内边距的简写属性，可同时指定四个方向的属性，跟border-width规则一样 外边距(margin)：外边距不会影响盒子可见框的大小，但是会影响到盒子的位置 一共有四个方向的外边距 margin-top 上外边距，设置一个正值，元素会向下移动 margin-right margin-bottom 下外边距，设置一个正值，下边的元素会向下移动 margin-left 左外边距，设置一个正值，元素会向右移动 元素在页面中是按照自左向右的顺序排列的，所以默认情况下如果我们设置的是左和上外边距则会移动元素自身 设置下右外边距会移动其他元素 margin也可以设置负值，元素会向相反的方向移动 margin简写属性，可以同时设置四个方向的外边距，方法和border-width一样 margin会影响到盒子实际占用空间 元素水平方向的布局 元素在父元素中水平方向的位置由以下几个属性共同决定 margin-left border-left padding-left width padding-right margin-right border-right 一个元素在其父元素中，水平布局必须满足以下等式 margin-left+border-left+padding-left+width+padding-right+border-right+margin-right 总和等于其父元素内容区的宽度 若上述等式不成立，则称为过渡约束，等式会自动调整 调整情况： 如果这七个值没有auto的情况，则浏览器会自动调整margin-right值以使等式满足 这七个值中有三个值可以设置成auto:width,margin-left,margin-right 如果某个值为auto，则自动调整auto的值以使等式成立 width的默认值是auto 如果将一个宽度和一个外边距设置为外边距，则宽度会调整到最大，设置为auto的外边距会自动为0 如果三个值都设置为auto，则外边距都为0；宽度最大 如果将两个外边距设置为auto，宽度固定值，则会将外边距设置为相同的值。经常使用这个特点来使得一个元素在父元素中水平居中 元素垂直方向的布局 默认情况下父元素的高度被内容撑开 子元素是在父元素内容区中排列 若子元素超过父元素，则子元素会溢出 使用overflow属性用来设置溢出的元素 可选值： visible 默认值 hidden 溢出内容将会被裁剪，不会显示 scroll 溢出内容滚动显示，生成滚动条 auto 根据需要生成滚动条 还有overflow-x和overflow-y 外边距的折叠 垂直外边距的重叠（折叠） 相邻的垂直方向上的外边距会重叠（折叠） 兄弟元素 兄弟元素间的相邻垂直外边距会取两者之间的较大值（两种都是正值） 特殊情况：如果相邻外边距一正一负，取两者的和。 如果相邻外边距都为负值，则取两者中绝对值较大的。 兄弟元素之间外边距的重叠，对于开发是有利的，不需要处理。 父子元素 父子元素间的相邻外边距，子元素的会传递给父元素（上外边距） 父子外边距的重叠会影响到页面的布局，必须进行处理。 行内元素盒模型 行内元素不支持设置高度和宽度 行内元素可以设置padding，垂直方向的padding不会影响页面布局 行内元素可以设置border，垂直方向的border不会影响页面布局 行内元素可以设置margin，垂直方向的margin不会影响页面布局 dispaly 用来设置元素显示类型 可选值 inline 将元素设置为行内元素 block 将元素设置为块元素 inline-block 将元素设置为行内块元素（即可以设置宽度和高度，又可以不会独占一行） table 将元素设置为表格 none 元素不在页面中 visibility 用来设置元素的显示状态 可选值 visible 默认值，元素正常显示 hidden 元素在页面中隐藏，不显示。但是依然占据页面位置。 默认样式 通常情况下，浏览器会为元素设置一些默认样式 默认样式的存在会影响到页面的布局，通常情况下需要去除默认样式（pc端页） 重置样式表，专门用来对浏览器样式进行重置， reset.css，直接去除浏览器的默认样式。 normalize.css，对默认样式进行统一。 盒子的大小 默认情况下，盒子可见框的大小由内容区，内边距和边框共同决定。 box-sizing：用来设置盒子尺寸的计算方式（设置height和width的作用范围） content-box 默认值：宽度和高度用来设置内容区的大小。 border-box：宽度和高度用来设置整个盒子可见框的大小。 此时width和height指的是内容区和内边距和边框的总大小。 轮廓阴影和圆角 outline 用来设置元素的轮廓线，用法和border一摸一样 轮廓和边框不同的点是轮廓不会影响到可见框的大小 box-shadow 用来设置元素的阴影效果，阴影不会影响页面布局 第一个值 水平偏移量 设置阴影的水平位置 正值向右移动，负值向左移动。 第二个值 垂直偏移量 设置阴影的垂直位置 正值向下移动，负值向上移动。 第三个值 阴影的模糊半径 第四个值 阴影的颜色 border-radius: 用来设置圆角 ，圆角的圆的半径大小 可以分别指定四个角的圆角 四个值 左上 右上 左下 右下 三个值 左上 右上/左下 右下 两个值 左上/右下 右上/左下 浮动简介 通过浮动可以使一个元素向其父元素的左侧或右侧移动 使用float 属性来设置元素的浮动 可选值： none 默认值，元素不浮动 left 元素向左浮动 right 元素向右浮动 注意，元素设置浮动以后，水平布局的等式便不需要强制成立 元素设置浮动以后，会完全从文档流中脱离，不再占用文档流的位置 所以元素下边的还在文档流中的元素会自动向上移动 浮动的特点： 浮动元素会完全脱离文档流，不再占据文档流中的位置 设置浮动后元素会向父元素的左侧或右侧移动 浮动元素默认不会从父元素中移出 浮动元素向左或向右移动时，不会超过他前边的其他浮动元素 如果浮动元素的上边是一个没有浮动元素的块元素，则浮动元素无法上移 浮动元素不会超过它上边的浮动的兄弟元素，最多最多就是和他一样高 简单总结 浮动目前来讲它的主要作用就是让页面中的元素可以水平排列 通过浮动可以制作一些水平方向的布局 其他特点 浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围 所以我们可以利用浮动来设置文字环绕图片效果 元素设置浮动以后，将会从文档流中脱离，元素的一些特点也会发生变化 脱离文档流的特点： 块元素 块元素不再独占页面一行 脱离文档流后，块元素的宽度和高度默认被内容撑开 行内元素 行内元素脱离文档流以后会变成块元素，特点和块元素一样 脱离文档流以后不需要区分行内元素和块元素了（未完待续）","categories":[{"name":"笔记","slug":"笔记","permalink":"https://lym0518.cn/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"study","slug":"study","permalink":"https://lym0518.cn/tags/study/"}],"author":"言梦"},{"title":"JAVA笔记","slug":"JAVA笔记","date":"2021-06-05T13:20:57.000Z","updated":"2022-06-06T14:07:05.357Z","comments":true,"path":"2021/06/05/JAVA笔记/","link":"","permalink":"https://lym0518.cn/2021/06/05/JAVA%E7%AC%94%E8%AE%B0/","excerpt":"","text":"基础语法注释 单行注释：只能注释一行文字。用法:// + 注释 多行注释：能注释一段文字。用法:/+ 内容 +/ 文档注释：javaDoc.用法:/** + 内容 + */ 标识符和关键字标识符是大小写敏感的。 数据类型定义字符串用String，它是一个类。 数据类型扩展整数拓展进制二进制0b 十进制0 八进制 十六进制0x 123456int i = 10;int i1 = 010;int i2 = 0x10;System.out.println(i);System.out.println(i1);System.out.println(i2); 浮点数拓展flout double少用浮点数进行比较浮点数有舍入误差结果为大约数 字符拓展涉及编码问题Unicode编码 占两个字节97=a 65=A表示范围U0000-UFFFF 转义字符 \\t 制表符 \\n 换行 布尔值扩展刚开始用第一种熟悉了用第二种 1234567boolean home = true; if (home==true)&#123; System.out.println(&quot;======================================&quot;); &#125;//第一种 if (home)&#123; System.out.println(&quot;======================================&quot;); &#125;//第二种 代码要精简易读。 类型转换低————————高byte-&gt;short-&gt;char-&gt;int-&gt;long-&gt;float-&gt;double 值的大小超出数据类型所规定的范围会数据溢出。 强制转换 （类型）变量名 高————低 自动转换 变量名 低————高 注意点 不能对布尔值进行转换 不能把类型转换为不相干的类型 在把高容量转向低容量的时候强制转换 转换时可能存在内存溢出或精度问题jdk7新特性，数字间可加下划线 变量定义：可以变化的量三要素：变量名，变量类型，作用域。 注意 每个变量都有类型，类型可以是基本类型，也可以是引用类型。 变量名必须是合法标识符。 变量声明必须是完整的语句，每个声明结尾要以分号结束。 变量作用域关键词：static 类变量 实例变量（在类里面，方法外面。变量类型，变量名字） 局部变量（在方法里面，必须声明和初始化值） 变量初始值为0，0.0，0000布尔值初始值为false除了基本类型，其余值都为null 常量final 常量+值 命名规范 所有变量，方法，类名，见名知意 类成员变量：首字母小写，驼峰原则。除了第一个单词意外，后面的单词首字母大写 局部变量：同类成员变量 常量：大写字母和下划线 类名：首字母大写，驼峰原则 方法名：同类成员变量。 运算符算术：+ - / ++ –赋值：=关系：&gt; &lt; == &gt;= &lt;= != instanceof逻辑运算符：&amp;&amp; || ！位运算符：&amp; | ^ ~ &gt;&gt; &lt;&lt; &gt;&gt;&gt; (了解)条件：？ ：扩展运算：+= -== /=ctrl+d:复制当前行到下一行。计算时有long型，结果为long型没有其余为int类型。cast：转换取余，也叫模运算。a++:先输出a，再自增1++a:先加一再输出a Java doc @author 作者名 @version 版本号 @since 指明需要最早使用的jdk版本 @param 参数名 @return 返回值情况 @throws 异常抛出情况 流程控制用户交互Scanner类名 java.util.Scanner 123456next()nextLine()//获取输入字符串hasNext()hasNextLine()//判断是否还有输入数据 数组 声明一个数组例：int[] nums; 创建一个数组例：nums = new int[10]; （中括号里是数组的大小数量） 获取数组的长度例：nums.length 内存堆 存放new的对象和数组 可以被所有线程共享，不会存放别的对象引用 栈 存放基本变量类型（也包含这个基本类型的数值） 引用对象的变量（会存放这个引用在堆里面的具体地址） 方法区 可以被所有线程共享 包含了所有的class和static变量 错误 ArrayIndexOutOfBoundsException：（数组下标越界异常） 数组三种初始化状态 静态初始化int[] a={1,5,2,4,6,3};一旦创建长度跟括号内元素个数有关，且确定。 动态初始化int[] a=new int[10];a[1]=8;a[2]=2; 数组的默认初始化初始化值为0； 数组四个基本特点 其长度是确定的。数组一旦被创建，它的大小就不可以被改变。 其元素必须是相同类型，不允许出现混合类型。 数组中的元素可以是任意数据类型，包括基本类型和引用类型。 数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型,数组对象本身是在堆中的。 小结 数组是相同数据类型（数据类型可以为任意类型）的有序集合。 数组也是对象，数组元素相当于对象的成员变量 数组长度是确定的，是不可改变的。如果越界，则报错：ArrayIndexOutOfBoundsException：(数组下标越界异常 )。 面向对象初识面向对象 物以类聚，分类的思维模式 属性+方法=类 对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理。 什么是面向对象 面向对象编程（oop） 本质:以类的方式组织代码，以对象的组织(封装)数据 抽象（类似提取） 三大特性 封装 继承 多态 从认识来考虑，先有对象后有类 从代码运行考虑，先有类后有对象 类与对象的关系&emsp;&emsp;类是一种抽象的数据类型，它是对某一类事物整体描述或定义，但是并不能代表某一个具体的事物&emsp;&emsp;对象是抽象概念的具体实例 创建与初始化 使用new关键字船创建对象的时候，除了分配内存空间，还会给创建好的对象进行默认的初始化以及对类中构造器的调用 构造器特点: 必须和类名字相同 必须没有返回类型，也不能写void 构造器的两个作用 使用new关键字，本质是在调用构造器 有参构造：一旦定义有参构造，无参就必须显示定义 定义了有参构造，如果想使用无参构造，显示的定义一个无参的构造。 创建对象内存分析内存图： 小结：类与对象 类是一个模板，抽象，对象是一个具体的实例。 方法，定义，调用 对应的引用： 引用类型：基本类型（8） 对象是通过引用来操作的：栈—-》堆 属性：字段，成员变量。 默认初始化： 数字：0 char：u0000 boolean:false 引用：null 赋值： 修饰符 属性类型 属性名=属性值 对象的创建和使用 必须使用new关键字创造对象 构造器 对象的属性 对象的方法 类 静态的属性 属性 动态的行为 方法 封装 该露的露该藏的藏程序设计要求“高内聚，低耦合”。高内聚指类的内部数据操作细节自己完成，不允许外部干涉；低耦合指尽暴露少量的方法给外部使用。 封装（数据的隐藏）通常，应禁止直接访问一个对象中数据的直接表示，而应通过操作接口来访问，这称为信息隐藏相关关键字：private（私有）set（赋值）get（获得） 封装的作用 提高程序安全性，保护数据。 隐藏代码的实现细节 统一接口 增加系统可维护 一句话：属性私有 get/set 继承super注意点： super调用父类的构造方法，必须在构造方法的第一个 super必须只能出现在子类的方法或者构造方法中 super和this不能同时调用构造方法 与this的区别：&emsp;&emsp;代表的对象不同 ：&emsp;&emsp;&emsp;&emsp;this：本身调用这个对象&emsp;&emsp;&emsp;&emsp;super：代表父类对象的运用&emsp;&emsp;前提&emsp;&emsp;&emsp;&emsp;this：没有继承也可以使用&emsp;&emsp;&emsp;&emsp;super：只能在继承条件下使用&emsp;&emsp;构造方法&emsp;&emsp;&emsp;&emsp;this（）：本类的构造&emsp;&emsp;&emsp;&emsp;super（）：父类的构造","categories":[{"name":"笔记","slug":"笔记","permalink":"https://lym0518.cn/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"study","slug":"study","permalink":"https://lym0518.cn/tags/study/"}],"author":"言梦"}],"categories":[{"name":"问题总结","slug":"问题总结","permalink":"https://lym0518.cn/categories/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"},{"name":"笔记","slug":"笔记","permalink":"https://lym0518.cn/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"issue","slug":"issue","permalink":"https://lym0518.cn/tags/issue/"},{"name":"study","slug":"study","permalink":"https://lym0518.cn/tags/study/"}]}